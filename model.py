# -*- coding: utf-8 -*-
"""
Created on Wed Jun 27 12:11:14 2018

@author: Kartik
"""

import re
import numpy as np
from gensim import corpora, models, similarities
import nltk
from clean_text import clean_sent
import pickle

harry=[]
for i in range(1,8):
    path='harry_txt/harry'+str(i)+'.txt'
    temp=open(path,encoding='utf-8',errors='ignore').read().split('\n')
    for i in temp:
        if len(i.split())>5 and i!="Generated by ABC Amber LIT Converter, http://www.processtext.com/abclit.html":
            harry.append(i)
del temp ,path,i 


clean_harry=[]
for i in harry:
    clean_harry.append(clean_sent(i))   
del i,harry

#tokenize
word2int={}
for sent in clean_harry:
    for word in sent.split():
        if word not in word2int:
            word2int[word]=1
        else:
            word2int[word]+=1
            
threshold=25
temp={}
word_number=0
for word,count in word2int.items():
    if count>=threshold:
        temp[word]=word_number
        word_number+=1
word2int=temp       
vocab_size=len(word2int)
pickle.dump(word2int, open('word2int', 'wb'))

tok_harry= [nltk.word_tokenize(sent) for sent in clean_harry] 

model = models.Word2Vec(tok_harry, min_count=1, size = 32)    


filename = 'word2vec.bin'
pickle.dump(model, open(filename, 'wb'))
#word2vec,vectors={},[]
#for word,count in word2int.items():
#    if word in model.wv.vocab:
#        word2vec[word]=model[word].tolist()
#        vectors.append(model[word].tolist())
#
#int2word={}
#for word,count in word2int.items():
#    int2word[count]=word
#
#
# 
#
#model.most_similar(positive=['ron'], topn=20)
#
#from sklearn.manifold import TSNE
#model = TSNE(n_components=2, random_state=0)
#np.set_printoptions(suppress=True)
#vectors = model.fit_transform(np.asarray(vectors))
#
#from sklearn import preprocessing
#normalizer = preprocessing.Normalizer()
#vectors =  normalizer.fit_transform(np.asarray(vectors), '2')
#
#for i,vec in enumerate(vectors):
#    vectors[i]=[vec[0]*10,vec[1]*10]
#
#
#
#vectors[333]
#
#
#import matplotlib.pyplot as plt
#fig, ax = plt.subplots()
#for word,_ in word2int.items():
##    print(word, vectors[word2int[word]][1])
#    ax.annotate(word, (vectors[word2int[word]][0],vectors[word2int[word]][1] ))
#plt.show()
